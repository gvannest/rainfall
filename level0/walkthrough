1. ./level0 => segfault

2. launch `gdb ./level0`
then `set disassembly-flavor intel`
then `disass main`

3. set breakpoint `b *address` before and after fisrt function call which is atoi
We can see that it segfaults at atoi. Because there are no arguments.
indeed :
	- at ebp + 0x4 we have the address stroed in eip register (the address of the next instruction after the called function returns)
	- at ebp + 0x8 we have argc
	- at ebp + 0xc we have the char ** argv
Hence $eax goes there and grab the second argument (first one being the executable), puts it on the stack (on esp) and then call atoi => this is the argument to atoi

3. We can see that after the call to atoi, $eax (where the return value is located) id compared to 0x1a7 which is 423.

4. if it is equal, the program does the following:
	- call strdup on a string located at address 0x80c5348. `x/s 0x80c5348` outputs "/bin/sh". Hence it makes a copy of this string and stor it in a pointer.
	- set the current gid and uid (real, effective and saved) to the effective gid/uid of the calling process, hence level1 here.
	- call execv => execute a shell command, here with command at 0x80c5348 = "/bin/sh". It gives a shell with level1 permissions

5. if not equal : write "No !\n" on stderr.

6. Hence we have to launche the program with the argument 423, and once in the shell (whoami outputs level1), we run the `cat /home/user/level1/.pass` commant and get the flag
